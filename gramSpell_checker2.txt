from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List
import re
import google.generativeai as genai
from dotenv import load_dotenv
import os

# Load environment variables
load_dotenv()

# Initialize FastAPI app
app = FastAPI()

# Configure Gemini API Key
genai.configure(api_key="AIzaSyD0IdlxrethiD4XktC1TTnzg9PJoH7vmCw")  # Add your API key here

# Data Model for Request
class Paragraph(BaseModel):
    text: str

# In-memory storage for corrections
corrections = []

def split_into_sentences(paragraph: str) -> List[str]:
    """
    Splits a paragraph into individual sentences using regex.
    """
    sentence_endings = r'[.!?]'
    sentences = re.split(sentence_endings, paragraph)
    sentences = [s.strip() for s in sentences if s.strip()]  # Remove empty strings
    return sentences

@app.post("/grammar-check")
async def check_grammar(paragraph: Paragraph):
    global corrections
    corrections = []

    # Split paragraph into sentences
    sentences = split_into_sentences(paragraph.text)

    # Load Gemini's model
    model = genai.GenerativeModel('gemini-pro')

    # Process each sentence
    for sentence in sentences:
        try:
            # Generate correction
            response = model.generate_content(f"Correct the grammar: {sentence}")
            corrected_text = response.text.strip()

            # Append to results
            corrections.append({
                "original": sentence,
                "correction": corrected_text
            })
        except Exception as e:
            raise HTTPException(status_code=500, detail=f"Error processing sentence: {str(e)}")

    return {"corrections": corrections}

@app.post("/process-text")
async def process_text(paragraph: Paragraph):
    global corrections
    corrections = []
    
    # Split paragraph into sentences
    sentences = split_into_sentences(paragraph.text)
    
    # Load Gemini model
    model = genai.GenerativeModel('gemini-pro')
    for sentence in sentences:  # Corrected the loop to iterate over sentences
        try:
            # Check spelling
            spell_check_prompt = f"Check and correct the spelling of this sentence: {sentence}"
            spell_check_response = model.generate_content(spell_check_prompt)
            spell_checked_text = spell_check_response.text.strip()

            # Store result
            corrections.append({
                "original": sentence,
                "spell_checked": spell_checked_text,
            })
        except Exception as e:
            raise HTTPException(status_code=500, detail=str(e))

    return {"corrections": corrections}

@app.get("/get-corrections")
async def get_corrections():
    return {"corrections": corrections}
